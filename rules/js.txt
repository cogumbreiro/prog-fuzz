"(function () { return [0]; })();"
"function [main] ([]) { []; []; []; []; }"
"var [x]"
"var [x] = [0]"
"[x]([])"
"[y][]"
"[x] = [6]"
"[]; []; []; []; []; []; []; []; []; []"
"[]; []"
"[], []"
"{ [] }"
"{ []; []; [] }"
"( [] )"
"( [0], [0], [0] )"
"\[[]\]"
"[5] * [10]"
"[5] + [10]"
"[x]"
"[][2][]"
"[this]"
"[this].[length]"
"[][3.14][]"
"[\"x\"]"
"['x']"
"[document].[getElementById]([\"x\"]).[innerHTML]"
"[x] += [0]"
"[x] -= [0]"
"[x] * [1]"
"[x] *= [1]"
"[x] / [1]"
"[x] /= [1]"
"[x] %= [1]"
"[x]++"
"[x] <<= [0]"
"[x] >>= [0]"
"[x] >>>= [0]"
"[x] &= [0]"
"[x] ^= [0]"
"[x] |= [0]"
"[x] **= [0]"
"{[x]:[\"x\"], [y]:[\"y\"]}"
"[x]:[\"x\"]"
"1[]e1[]"
"1[]e-1[]"
"[x] == [x]"
"[x] === [x]"
"typeof [x]"
"[undefined]"
"[null]"
"[true]"
"[false]"
"function [x]([]) { [] }"
"return [x]"
"['x'].length"
"\\'"
"\\\""
"['x'].[indexOf](['y'])"
"99999999[]"
"0.9[]"
"[0].[toString]([])"
"[0].[toExponential]([1])"
"[0].[toFixed]([0])"
"[0].[toPrecision]([])"
"[0].[valueOf]([])"
"Number([\"1\"])"
"new [Date]([\"2017-09-30\"])"
"new [x]([])"
"parseInt([\"0\"])"
"parseFloat([\"0\"])"
"[Number.MAX_VALUE]"
"[Number.MIN_VALUE]"
"[Number.NEGATIVE_INFINITY]"
"[Number.POSITIVE_INFINITY]"
"[Number].[NaN]"
"print([\"x\"])"
"new [DataView](new [ArrayBuffer]([1]), [0], [0]).[buffer]"
"[assert].[sameValue]([x], [x])"
"[Reflect].[construct]([x], [\[\]], [null])"
"if ([0]) { []; []; [] } else { []; []; [] }"
"for ([]; []; []) { []; []; [] }"
"for (var [x] in [\[\]]) { []; []; [] }"

# From alex on GitHub
"[$&]"
"[$']"
"[$+]"
"[$1]"
"[$2]"
"[$3]"
"[$4]"
"[$5]"
"[$6]"
"[$7]"
"[$8]"
"[$9]"
"[$_]"
"[$`]"
"[Array]"
"[ArrayBuffer]"
"[EPSILON]"
"[Float64Array]"
"[Instance]"
"[MAX_SAFE_INTEGER]"
"[MAX_VALUE]"
"[MIN_SAFE_INTEGER]"
"[MIN_VALUE]"
"[Module]"
"[NEGATIVE_INFINITY]"
"[NaN]"
"[Number]"
"[Object]"
"[POSITIVE_INFINITY]"
"[Proxy]"
"[RegExp]"
"[Table]"
"[UTC]"
"[Uint32Array]"
"[Uint8Array]"
"[WebAssembly]"
"[__defineGetter__]"
"[__lookupGetter__]"
"[__proto__]"
"[apply]"
"[arguments]"
"[assign]"
"[byteLength]"
"[call]"
"[caller]"
"[concat]"
"[constructor]"
"[copyWithin]"
"[create]"
"[decodeURI]"
"[defineProperties]"
"[defineProperty]"
"[entries]"
"[eval]"
"[fill]"
"[for]"
"[freeze]"
"[from]"
"[fromCharCode]"
"[fromCodePoint]"
"[get]"
"[getOwnPropertyDescriptor]"
"[getOwnPropertyDescriptors]"
"[getOwnPropertyNames]"
"[getOwnPropertySymbols]"
"[getPrototypeOf]"
"[hasInstance]"
"[indexOf]"
"[input]"
"[is]"
"[isArray]"
"[isConcatSpreadable]"
"[isExtensible]"
"[isFinite]"
"[isFrozen]"
"[isInteger]"
"[isNaN]"
"[isSafeInteger]"
"[isSealed]"
"[iterator]"
"[join]"
"[keyFor]"
"[keys]"
"[lastMatch]"
"[lastParen]"
"[leftContext]"
"[length]"
"[link]"
"[map]"
"[match]"
"[name]"
"[now]"
"[of]"
"[parse]"
"[parseFloat]"
"[parseInt]"
"[preventExtensions]"
"[prototype]"
"[push]"
"[raw]"
"[repeat]"
"[replace]"
"[reverse]"
"[rightContext]"
"[seal]"
"[search]"
"[setPrototypeOf]"
"[shift]"
"[slice]"
"[sort]"
"[species]"
"[splice]"
"[split]"
"[subarray]"
"[this]"
"[toPrimitive]"
"[toString]"
"[toStringTag]"
"[unscopables]"
"[valueOf]"
"[values]"

# from gecko/js test suite
"[]; [assert].[sameValue]([Object].[getPrototypeOf]([Uint8Array]), [TypedArray]); [] [reportCompare]([0], [0]); []"
"[]; var [following] = [0]; var [iter] = [function]* ([]) { []; throw new [Test262Error]([]); []; [following] += [1]; }([]); [class] [C] { [] [method](\[,\] = [iter]) { [] } }; []; [var] [c] = [new C()]; []; [assert].[throws]([Test262Error], [function]([]) { [c].[method]([]); []; }); [iter].[next]([]); []; [assert].[sameValue]([following], [0], ['Iterator was properly closed.']); []"
